; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

define void @triton__0d1d2d3d4d5d67(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !5 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %10 = shl i32 %9, 1, !dbg !8
  %11 = and i32 %10, 254, !dbg !8
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !9
  %13 = shl i32 %12, 8, !dbg !10
  %14 = or i32 %13, %11, !dbg !11
  %15 = or i32 %14, 1, !dbg !11
  %16 = icmp slt i32 %14, %7, !dbg !12
  %17 = icmp slt i32 %15, %7, !dbg !12
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %0, i1 true) #1, !dbg !13
  %19 = bitcast i32 %18 to float, !dbg !13
  %20 = sext i32 %14 to i64, !dbg !14
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !14
  %22 = sext i32 %15 to i64, !dbg !14
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !14
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %16) #1, !dbg !15
  %25 = bitcast i32 %24 to float, !dbg !15
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %17) #1, !dbg !15
  %27 = bitcast i32 %26 to float, !dbg !15
  %28 = getelementptr float, ptr addrspace(1) %2, i64 %20, !dbg !16
  %29 = getelementptr float, ptr addrspace(1) %2, i64 %22, !dbg !16
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %16) #1, !dbg !17
  %31 = bitcast i32 %30 to float, !dbg !17
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %17) #1, !dbg !17
  %33 = bitcast i32 %32 to float, !dbg !17
  %34 = getelementptr float, ptr addrspace(1) %3, i64 %20, !dbg !18
  %35 = getelementptr float, ptr addrspace(1) %3, i64 %22, !dbg !18
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %16) #1, !dbg !19
  %37 = bitcast i32 %36 to float, !dbg !19
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %17) #1, !dbg !19
  %39 = bitcast i32 %38 to float, !dbg !19
  %40 = getelementptr half, ptr addrspace(1) %4, i64 %20, !dbg !20
  %41 = getelementptr half, ptr addrspace(1) %4, i64 %22, !dbg !20
  %42 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %40, i1 %16) #1, !dbg !21
  %43 = bitcast i16 %42 to half, !dbg !21
  %44 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %17) #1, !dbg !21
  %45 = bitcast i16 %44 to half, !dbg !21
  %46 = fpext half %43 to float, !dbg !22
  %47 = fpext half %45 to float, !dbg !22
  %48 = sitofp i32 %6 to float, !dbg !23
  %49 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %19, float %48) #1, !dbg !24
  %50 = fmul float %25, 0x3FCC6A7F00000000, !dbg !25
  %51 = fmul float %27, 0x3FCC6A7F00000000, !dbg !25
  %52 = fsub float 1.000000e+00, %50, !dbg !26
  %53 = fsub float 1.000000e+00, %51, !dbg !26
  %54 = fmul float %52, %49, !dbg !27
  %55 = fmul float %53, %49, !dbg !27
  %56 = fmul float %54, %31, !dbg !28
  %57 = fmul float %55, %33, !dbg !28
  %58 = fmul float %37, %37, !dbg !29
  %59 = fmul float %39, %39, !dbg !29
  %60 = fmul float %58, 3.000000e+00, !dbg !30
  %61 = fmul float %59, 3.000000e+00, !dbg !30
  %62 = fmul float %60, %56, !dbg !31
  %63 = fmul float %61, %57, !dbg !31
  %64 = fsub float 0.000000e+00, %62, !dbg !32
  %65 = fsub float 0.000000e+00, %63, !dbg !32
  %66 = fsub float 1.000000e+00, %25, !dbg !33
  %67 = fsub float 1.000000e+00, %27, !dbg !33
  %68 = fmul float %66, %64, !dbg !34
  %69 = fmul float %67, %65, !dbg !34
  %70 = fsub float 0.000000e+00, %68, !dbg !35
  %71 = fsub float 0.000000e+00, %69, !dbg !35
  %72 = fmul float %64, %25, !dbg !36
  %73 = fmul float %65, %27, !dbg !36
  %74 = fadd float %72, %70, !dbg !37
  %75 = fadd float %73, %71, !dbg !37
  %76 = fsub float 0.000000e+00, %46, !dbg !38
  %77 = fsub float 0.000000e+00, %47, !dbg !38
  %78 = fmul float %76, 0x3FF7154760000000, !dbg !42
  %79 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %78) #1, !dbg !42
  %80 = fmul float %77, 0x3FF7154760000000, !dbg !42
  %81 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %80) #1, !dbg !42
  %82 = fadd float %79, 1.000000e+00, !dbg !43
  %83 = fadd float %81, 1.000000e+00, !dbg !43
  %84 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %82) #1, !dbg !44
  %85 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %83) #1, !dbg !44
  %86 = fsub float 1.000000e+00, %84, !dbg !45
  %87 = fsub float 1.000000e+00, %85, !dbg !45
  %88 = fmul float %84, %86, !dbg !46
  %89 = fmul float %85, %87, !dbg !46
  %90 = fmul float %88, %74, !dbg !47
  %91 = fmul float %89, %75, !dbg !47
  %92 = fsub float %84, %25, !dbg !48
  %93 = fsub float %85, %27, !dbg !48
  %94 = fmul float %58, %37, !dbg !49
  %95 = fmul float %59, %39, !dbg !49
  %96 = fmul float %94, %54, !dbg !50
  %97 = fmul float %95, %55, !dbg !50
  %98 = fmul float %96, %92, !dbg !51
  %99 = fmul float %97, %93, !dbg !51
  %100 = fadd float %98, %90, !dbg !52
  %101 = fadd float %99, %91, !dbg !52
  %102 = getelementptr half, ptr addrspace(1) %5, i64 %20, !dbg !53
  %103 = getelementptr half, ptr addrspace(1) %5, i64 %22, !dbg !53
  %104 = fptrunc float %100 to half, !dbg !54
  %105 = fptrunc float %101 to half, !dbg !54
  %106 = bitcast half %104 to i16, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %106, ptr addrspace(1) %102, i1 %16) #1, !dbg !54
  %107 = bitcast half %105 to i16, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %107, ptr addrspace(1) %103, i1 %17) #1, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "c5ye33oj5xxwhoiwklbx2k7yeoylyo6vrcnyehldcr6jchxpzby6.py", directory: "/tmp/torchinductor_leighm/5y")
!3 = !{ptr @triton__0d1d2d3d4d5d67, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5d67, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d67", linkageName: "triton__0d1d2d3d4d5d67", scope: !2, file: !2, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 20, column: 36, scope: !5)
!9 = !DILocation(line: 19, column: 28, scope: !5)
!10 = !DILocation(line: 19, column: 33, scope: !5)
!11 = !DILocation(line: 20, column: 23, scope: !5)
!12 = !DILocation(line: 21, column: 21, scope: !5)
!13 = !DILocation(line: 23, column: 19, scope: !5)
!14 = !DILocation(line: 25, column: 30, scope: !5)
!15 = !DILocation(line: 25, column: 35, scope: !5)
!16 = !DILocation(line: 26, column: 31, scope: !5)
!17 = !DILocation(line: 26, column: 36, scope: !5)
!18 = !DILocation(line: 27, column: 31, scope: !5)
!19 = !DILocation(line: 27, column: 36, scope: !5)
!20 = !DILocation(line: 28, column: 31, scope: !5)
!21 = !DILocation(line: 28, column: 36, scope: !5)
!22 = !DILocation(line: 28, column: 46, scope: !5)
!23 = !DILocation(line: 30, column: 19, scope: !5)
!24 = !DILocation(line: 31, column: 18, scope: !5)
!25 = !DILocation(line: 33, column: 18, scope: !5)
!26 = !DILocation(line: 35, column: 18, scope: !5)
!27 = !DILocation(line: 36, column: 19, scope: !5)
!28 = !DILocation(line: 37, column: 20, scope: !5)
!29 = !DILocation(line: 38, column: 20, scope: !5)
!30 = !DILocation(line: 40, column: 20, scope: !5)
!31 = !DILocation(line: 41, column: 20, scope: !5)
!32 = !DILocation(line: 42, column: 13, scope: !5)
!33 = !DILocation(line: 43, column: 19, scope: !5)
!34 = !DILocation(line: 44, column: 20, scope: !5)
!35 = !DILocation(line: 45, column: 13, scope: !5)
!36 = !DILocation(line: 46, column: 20, scope: !5)
!37 = !DILocation(line: 47, column: 20, scope: !5)
!38 = !DILocation(line: 27, column: 30, scope: !39, inlinedAt: !41)
!39 = distinct !DILexicalBlockFile(scope: !5, file: !40, discriminator: 0)
!40 = !DIFile(filename: "standard.py", directory: "/opt/conda/lib/python3.10/site-packages/triton/language")
!41 = !DILocation(line: 49, column: 23, scope: !39)
!42 = !DILocation(line: 27, column: 29, scope: !39, inlinedAt: !41)
!43 = !DILocation(line: 27, column: 20, scope: !39, inlinedAt: !41)
!44 = !DILocation(line: 27, column: 16, scope: !39, inlinedAt: !41)
!45 = !DILocation(line: 50, column: 19, scope: !5)
!46 = !DILocation(line: 51, column: 20, scope: !5)
!47 = !DILocation(line: 52, column: 20, scope: !5)
!48 = !DILocation(line: 53, column: 20, scope: !5)
!49 = !DILocation(line: 54, column: 20, scope: !5)
!50 = !DILocation(line: 55, column: 20, scope: !5)
!51 = !DILocation(line: 56, column: 20, scope: !5)
!52 = !DILocation(line: 57, column: 20, scope: !5)
!53 = !DILocation(line: 59, column: 25, scope: !5)
!54 = !DILocation(line: 59, column: 37, scope: !5)
!55 = !DILocation(line: 59, column: 4, scope: !5)
