#blocked = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0], CTAsPerCGA = [1], CTASplitNum = [1], CTAOrder = [0]}>
module attributes {"triton_gpu.compute-capability" = 80 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton__0d1d2d3d4(%arg0: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg4: i32) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<128xf32, #blocked>
    %cst_0 = arith.constant dense<1.000000e+00> : tensor<128xf32, #blocked>
    %c128_i32 = arith.constant 128 : i32
    %0 = tt.get_program_id x : i32
    %1 = arith.muli %0, %c128_i32 : i32
    %2 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #blocked>
    %3 = tt.splat %1 : (i32) -> tensor<128xi32, #blocked>
    %4 = arith.addi %3, %2 : tensor<128xi32, #blocked>
    %5 = tt.splat %arg4 : (i32) -> tensor<128xi32, #blocked>
    %6 = arith.cmpi slt, %4, %5 : tensor<128xi32, #blocked>
    %7 = tt.splat %arg0 : (!tt.ptr<f32, 1>) -> tensor<128x!tt.ptr<f32, 1>, #blocked>
    %8 = tt.addptr %7, %4 : tensor<128x!tt.ptr<f32, 1>, #blocked>, tensor<128xi32, #blocked>
    %9 = tt.load %8, %6 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128xf32, #blocked>
    %10 = tt.splat %arg1 : (!tt.ptr<f16, 1>) -> tensor<128x!tt.ptr<f16, 1>, #blocked>
    %11 = tt.addptr %10, %4 : tensor<128x!tt.ptr<f16, 1>, #blocked>, tensor<128xi32, #blocked>
    %12 = tt.load %11, %6 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128xf16, #blocked>
    %13 = arith.extf %12 : tensor<128xf16, #blocked> to tensor<128xf32, #blocked>
    %14 = arith.subf %cst_0, %9 : tensor<128xf32, #blocked>
    %15 = arith.mulf %14, %13 : tensor<128xf32, #blocked>
    %16 = arith.subf %cst, %13 : tensor<128xf32, #blocked>
    %17 = arith.cmpf ogt, %16, %cst : tensor<128xf32, #blocked>
    %18 = arith.cmpf une, %16, %16 : tensor<128xf32, #blocked>
    %19 = arith.ori %17, %18 : tensor<128xi1, #blocked>
    %20 = arith.select %19, %16, %cst : tensor<128xi1, #blocked>, tensor<128xf32, #blocked>
    %21 = arith.addf %15, %20 : tensor<128xf32, #blocked>
    %22 = arith.subf %cst, %20 : tensor<128xf32, #blocked>
    %23 = math.exp %22 : tensor<128xf32, #blocked>
    %24 = arith.subf %16, %20 : tensor<128xf32, #blocked>
    %25 = math.exp %24 : tensor<128xf32, #blocked>
    %26 = arith.addf %23, %25 : tensor<128xf32, #blocked>
    %27 = math.log %26 : tensor<128xf32, #blocked>
    %28 = arith.addf %21, %27 : tensor<128xf32, #blocked>
    %29 = math.exp %16 : tensor<128xf32, #blocked>
    %30 = arith.addf %29, %cst_0 : tensor<128xf32, #blocked>
    %31 = arith.divf %cst_0, %30 : tensor<128xf32, #blocked>
    %32 = arith.mulf %31, %9 : tensor<128xf32, #blocked>
    %33 = arith.subf %cst_0, %31 : tensor<128xf32, #blocked>
    %34 = arith.mulf %33, %14 : tensor<128xf32, #blocked>
    %35 = arith.addf %32, %34 : tensor<128xf32, #blocked>
    %36 = arith.subf %cst_0, %35 : tensor<128xf32, #blocked>
    %37 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<128x!tt.ptr<f32, 1>, #blocked>
    %38 = tt.addptr %37, %4 : tensor<128x!tt.ptr<f32, 1>, #blocked>, tensor<128xi32, #blocked>
    tt.store %38, %28, %6 {cache = 1 : i32, evict = 1 : i32} : tensor<128xf32, #blocked>
    %39 = tt.splat %arg3 : (!tt.ptr<f32, 1>) -> tensor<128x!tt.ptr<f32, 1>, #blocked>
    %40 = tt.addptr %39, %4 : tensor<128x!tt.ptr<f32, 1>, #blocked>, tensor<128xi32, #blocked>
    tt.store %40, %36, %6 {cache = 1 : i32, evict = 1 : i32} : tensor<128xf32, #blocked>
    tt.return
  }
}
