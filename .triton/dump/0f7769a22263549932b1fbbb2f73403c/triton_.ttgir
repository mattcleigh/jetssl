#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 8], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 8], order = [0, 1], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
module attributes {"triton_gpu.compute-capability" = 80 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton__0d1d2d3d456(%arg0: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg4: i32, %arg5: i32, %arg6: i32) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32
    %c2048_i32 = arith.constant 2048 : i32
    %c0_i32 = arith.constant 0 : i32
    %cst = arith.constant dense<1.000000e+00> : tensor<1x2048xf32, #blocked>
    %cst_0 = arith.constant dense<-2.220000e-01> : tensor<1x2048xf32, #blocked>
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<1x2048xf32, #blocked>
    %c1_i32 = arith.constant 1 : i32
    %0 = tt.get_program_id x : i32
    %1 = arith.cmpi slt, %0, %c2_i32 : i32
    %2 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %3 = tt.expand_dims %2 {axis = 0 : i32} : (tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x2048xi32, #blocked>
    %4 = tt.splat %arg6 : (i32) -> tensor<1x2048xi32, #blocked>
    %5 = arith.addi %arg4, %c1_i32 : i32
    %6 = arith.divsi %5, %c2_i32 : i32
    %7 = arith.muli %0, %6 : i32
    %8 = tt.splat %7 : (i32) -> tensor<1x2048xi32, #blocked>
    %9 = tt.splat %arg4 : (i32) -> tensor<1x2048xi32, #blocked>
    %10 = tt.splat %arg0 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>, #blocked>
    %11 = tt.splat %1 : (i1) -> tensor<1x2048xi1, #blocked>
    %12 = tt.splat %arg1 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>, #blocked>
    %13 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>, #blocked>
    %14 = scf.for %arg7 = %c0_i32 to %arg6 step %c2048_i32 iter_args(%arg8 = %cst_1) -> (tensor<1x2048xf32, #blocked>)  : i32 {
      %21 = tt.splat %arg7 : (i32) -> tensor<1x2048xi32, #blocked>
      %22 = arith.addi %21, %3 : tensor<1x2048xi32, #blocked>
      %23 = arith.cmpi slt, %22, %4 : tensor<1x2048xi32, #blocked>
      %24 = arith.addi %22, %8 : tensor<1x2048xi32, #blocked>
      %25 = arith.cmpi slt, %24, %9 : tensor<1x2048xi32, #blocked>
      %26 = tt.addptr %10, %24 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %27 = arith.andi %23, %25 : tensor<1x2048xi1, #blocked>
      %28 = arith.andi %27, %11 : tensor<1x2048xi1, #blocked>
      %29 = tt.load %26, %28, %cst_1 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32, #blocked>
      %30 = arith.mulf %29, %cst_0 : tensor<1x2048xf32, #blocked>
      %31 = arith.addf %30, %cst : tensor<1x2048xf32, #blocked>
      %32 = tt.addptr %12, %24 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %33 = tt.load %32, %28, %cst_1 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32, #blocked>
      %34 = tt.addptr %13, %24 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %35 = tt.load %34, %28, %cst_1 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32, #blocked>
      %36 = arith.mulf %35, %35 : tensor<1x2048xf32, #blocked>
      %37 = arith.mulf %36, %35 : tensor<1x2048xf32, #blocked>
      %38 = arith.mulf %33, %37 : tensor<1x2048xf32, #blocked>
      %39 = arith.mulf %31, %38 : tensor<1x2048xf32, #blocked>
      %40 = arith.select %25, %39, %cst_1 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked>
      %41 = arith.addf %arg8, %40 : tensor<1x2048xf32, #blocked>
      %42 = arith.andi %23, %11 : tensor<1x2048xi1, #blocked>
      %43 = arith.select %42, %41, %arg8 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked>
      scf.yield %43 : tensor<1x2048xf32, #blocked>
    }
    %15 = "tt.reduce"(%14) <{axis = 1 : i32}> ({
    ^bb0(%arg7: f32, %arg8: f32):
      %21 = arith.addf %arg7, %arg8 : f32
      tt.reduce.return %21 : f32
    }) : (tensor<1x2048xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %16 = triton_gpu.convert_layout %15 : (tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>
    %17 = tt.expand_dims %16 {axis = 1 : i32} : (tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<1x1xf32, #blocked1>
    %18 = tt.addptr %arg3, %0 : !tt.ptr<f32, 1>, i32
    %19 = tt.splat %18 : (!tt.ptr<f32, 1>) -> tensor<1x1x!tt.ptr<f32, 1>, #blocked1>
    %20 = tt.splat %1 : (i1) -> tensor<1x1xi1, #blocked1>
    tt.store %19, %17, %20 {cache = 1 : i32, evict = 1 : i32} : tensor<1x1xf32, #blocked1>
    tt.return
  }
}
