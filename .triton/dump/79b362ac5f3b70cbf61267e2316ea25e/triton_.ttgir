#blocked = #triton_gpu.blocked<{sizePerThread = [2], threadsPerWarp = [32], warpsPerCTA = [4], order = [0], CTAsPerCGA = [1], CTASplitNum = [1], CTAOrder = [0]}>
module attributes {"triton_gpu.compute-capability" = 86 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton__0d1d2d3d4d5d67(%arg0: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32}, %arg5: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32}, %arg6: i32, %arg7: i32) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<256xf32, #blocked>
    %cst_0 = arith.constant dense<3.000000e+00> : tensor<256xf32, #blocked>
    %cst_1 = arith.constant dense<1.000000e+00> : tensor<256xf32, #blocked>
    %cst_2 = arith.constant dense<-2.220000e-01> : tensor<256xf32, #blocked>
    %c256_i32 = arith.constant 256 : i32
    %c0_i32 = arith.constant 0 : i32
    %0 = tt.get_program_id x : i32
    %1 = arith.muli %0, %c256_i32 : i32
    %2 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #blocked>
    %3 = tt.splat %1 : (i32) -> tensor<256xi32, #blocked>
    %4 = arith.addi %3, %2 : tensor<256xi32, #blocked>
    %5 = tt.splat %arg7 : (i32) -> tensor<256xi32, #blocked>
    %6 = arith.cmpi slt, %4, %5 : tensor<256xi32, #blocked>
    %7 = tt.addptr %arg0, %c0_i32 : !tt.ptr<f32, 1>, i32
    %8 = tt.load %7 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : f32
    %9 = tt.splat %arg1 : (!tt.ptr<f32, 1>) -> tensor<256x!tt.ptr<f32, 1>, #blocked>
    %10 = tt.addptr %9, %4 : tensor<256x!tt.ptr<f32, 1>, #blocked>, tensor<256xi32, #blocked>
    %11 = tt.load %10, %6 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<256xf32, #blocked>
    %12 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<256x!tt.ptr<f32, 1>, #blocked>
    %13 = tt.addptr %12, %4 : tensor<256x!tt.ptr<f32, 1>, #blocked>, tensor<256xi32, #blocked>
    %14 = tt.load %13, %6 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<256xf32, #blocked>
    %15 = tt.splat %arg3 : (!tt.ptr<f32, 1>) -> tensor<256x!tt.ptr<f32, 1>, #blocked>
    %16 = tt.addptr %15, %4 : tensor<256x!tt.ptr<f32, 1>, #blocked>, tensor<256xi32, #blocked>
    %17 = tt.load %16, %6 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<256xf32, #blocked>
    %18 = tt.splat %arg4 : (!tt.ptr<f16, 1>) -> tensor<256x!tt.ptr<f16, 1>, #blocked>
    %19 = tt.addptr %18, %4 : tensor<256x!tt.ptr<f16, 1>, #blocked>, tensor<256xi32, #blocked>
    %20 = tt.load %19, %6 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<256xf16, #blocked>
    %21 = arith.extf %20 : tensor<256xf16, #blocked> to tensor<256xf32, #blocked>
    %22 = arith.sitofp %arg6 : i32 to f32
    %23 = arith.divf %8, %22 : f32
    %24 = tt.splat %23 : (f32) -> tensor<256xf32, #blocked>
    %25 = arith.mulf %11, %cst_2 : tensor<256xf32, #blocked>
    %26 = arith.addf %25, %cst_1 : tensor<256xf32, #blocked>
    %27 = arith.mulf %24, %26 : tensor<256xf32, #blocked>
    %28 = arith.mulf %27, %14 : tensor<256xf32, #blocked>
    %29 = arith.mulf %17, %17 : tensor<256xf32, #blocked>
    %30 = arith.mulf %29, %cst_0 : tensor<256xf32, #blocked>
    %31 = arith.mulf %28, %30 : tensor<256xf32, #blocked>
    %32 = arith.subf %cst, %31 : tensor<256xf32, #blocked>
    %33 = arith.subf %cst_1, %11 : tensor<256xf32, #blocked>
    %34 = arith.mulf %32, %33 : tensor<256xf32, #blocked>
    %35 = arith.subf %cst, %34 : tensor<256xf32, #blocked>
    %36 = arith.mulf %32, %11 : tensor<256xf32, #blocked>
    %37 = arith.addf %35, %36 : tensor<256xf32, #blocked>
    %38 = arith.subf %cst, %21 : tensor<256xf32, #blocked>
    %39 = math.exp %38 : tensor<256xf32, #blocked>
    %40 = arith.addf %39, %cst_1 : tensor<256xf32, #blocked>
    %41 = arith.divf %cst_1, %40 : tensor<256xf32, #blocked>
    %42 = arith.subf %cst_1, %41 : tensor<256xf32, #blocked>
    %43 = arith.mulf %41, %42 : tensor<256xf32, #blocked>
    %44 = arith.mulf %37, %43 : tensor<256xf32, #blocked>
    %45 = arith.subf %41, %11 : tensor<256xf32, #blocked>
    %46 = arith.mulf %29, %17 : tensor<256xf32, #blocked>
    %47 = arith.mulf %27, %46 : tensor<256xf32, #blocked>
    %48 = arith.mulf %45, %47 : tensor<256xf32, #blocked>
    %49 = arith.addf %44, %48 : tensor<256xf32, #blocked>
    %50 = tt.splat %arg5 : (!tt.ptr<f16, 1>) -> tensor<256x!tt.ptr<f16, 1>, #blocked>
    %51 = tt.addptr %50, %4 : tensor<256x!tt.ptr<f16, 1>, #blocked>, tensor<256xi32, #blocked>
    %52 = arith.truncf %49 : tensor<256xf32, #blocked> to tensor<256xf16, #blocked>
    tt.store %51, %52, %6 {cache = 1 : i32, evict = 1 : i32} : tensor<256xf16, #blocked>
    tt.return
  }
}
