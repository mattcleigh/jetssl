; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]

define void @triton__0d1d234(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr !dbg !5 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %urem = and i32 %6, 255, !dbg !8
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !9
  %8 = icmp slt i32 %7, 2, !dbg !10
  %9 = add i32 %2, 1, !dbg !11
  %10 = sdiv i32 %9, 2, !dbg !12
  %11 = mul i32 %7, %10, !dbg !13
  %12 = icmp sgt i32 %4, 0, !dbg !14
  br i1 %12, label %.lr.ph.preheader, label %._crit_edge, !dbg !14

.lr.ph.preheader:                                 ; preds = %5
  %13 = insertelement <8 x i32> poison, i32 %4, i64 0
  %14 = shufflevector <8 x i32> %13, <8 x i32> poison, <8 x i32> zeroinitializer
  %15 = insertelement <8 x i32> poison, i32 %11, i64 0
  %16 = shufflevector <8 x i32> %15, <8 x i32> poison, <8 x i32> zeroinitializer
  %17 = insertelement <8 x i32> poison, i32 %2, i64 0
  %18 = shufflevector <8 x i32> %17, <8 x i32> poison, <8 x i32> zeroinitializer
  %19 = insertelement <8 x i1> poison, i1 %8, i64 0
  %20 = shufflevector <8 x i1> %19, <8 x i1> poison, <8 x i32> zeroinitializer
  br label %.lr.ph, !dbg !14

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %21 = phi i32 [ %111, %.lr.ph ], [ 0, %.lr.ph.preheader ]
  %22 = phi <8 x float> [ %110, %.lr.ph ], [ zeroinitializer, %.lr.ph.preheader ]
  %23 = or i32 %21, %urem, !dbg !15
  %24 = or i32 %23, 256, !dbg !15
  %25 = or i32 %23, 512, !dbg !15
  %26 = or i32 %23, 768, !dbg !15
  %27 = or i32 %23, 1024, !dbg !15
  %28 = or i32 %23, 1280, !dbg !15
  %29 = or i32 %23, 1536, !dbg !15
  %30 = or i32 %23, 1792, !dbg !15
  %31 = insertelement <8 x i32> poison, i32 %23, i64 0, !dbg !16
  %32 = insertelement <8 x i32> %31, i32 %24, i64 1, !dbg !16
  %33 = insertelement <8 x i32> %32, i32 %25, i64 2, !dbg !16
  %34 = insertelement <8 x i32> %33, i32 %26, i64 3, !dbg !16
  %35 = insertelement <8 x i32> %34, i32 %27, i64 4, !dbg !16
  %36 = insertelement <8 x i32> %35, i32 %28, i64 5, !dbg !16
  %37 = insertelement <8 x i32> %36, i32 %29, i64 6, !dbg !16
  %38 = insertelement <8 x i32> %37, i32 %30, i64 7, !dbg !16
  %39 = icmp slt <8 x i32> %38, %14, !dbg !16
  %40 = add <8 x i32> %38, %16, !dbg !17
  %41 = icmp slt <8 x i32> %40, %18, !dbg !18
  %42 = extractelement <8 x i32> %40, i64 0, !dbg !19
  %43 = sext i32 %42 to i64, !dbg !19
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !19
  %45 = extractelement <8 x i32> %40, i64 1, !dbg !19
  %46 = sext i32 %45 to i64, !dbg !19
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !19
  %48 = extractelement <8 x i32> %40, i64 2, !dbg !19
  %49 = sext i32 %48 to i64, !dbg !19
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !19
  %51 = extractelement <8 x i32> %40, i64 3, !dbg !19
  %52 = sext i32 %51 to i64, !dbg !19
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !19
  %54 = extractelement <8 x i32> %40, i64 4, !dbg !19
  %55 = sext i32 %54 to i64, !dbg !19
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !19
  %57 = extractelement <8 x i32> %40, i64 5, !dbg !19
  %58 = sext i32 %57 to i64, !dbg !19
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !19
  %60 = extractelement <8 x i32> %40, i64 6, !dbg !19
  %61 = sext i32 %60 to i64, !dbg !19
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !19
  %63 = extractelement <8 x i32> %40, i64 7, !dbg !19
  %64 = sext i32 %63 to i64, !dbg !19
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !19
  %66 = and <8 x i1> %39, %41, !dbg !20
  %67 = extractelement <8 x i1> %66, i64 0, !dbg !20
  %68 = and <8 x i1> %39, %41, !dbg !20
  %69 = extractelement <8 x i1> %68, i64 1, !dbg !20
  %70 = and <8 x i1> %39, %41, !dbg !20
  %71 = extractelement <8 x i1> %70, i64 2, !dbg !20
  %72 = and <8 x i1> %39, %41, !dbg !20
  %73 = extractelement <8 x i1> %72, i64 3, !dbg !20
  %74 = and <8 x i1> %39, %41, !dbg !20
  %75 = extractelement <8 x i1> %74, i64 4, !dbg !20
  %76 = and <8 x i1> %39, %41, !dbg !20
  %77 = extractelement <8 x i1> %76, i64 5, !dbg !20
  %78 = and <8 x i1> %39, %41, !dbg !20
  %79 = extractelement <8 x i1> %78, i64 6, !dbg !20
  %80 = and <8 x i1> %39, %41, !dbg !20
  %81 = extractelement <8 x i1> %80, i64 7, !dbg !20
  %82 = and i1 %8, %67, !dbg !21
  %83 = and i1 %8, %69, !dbg !21
  %84 = and i1 %8, %71, !dbg !21
  %85 = and i1 %8, %73, !dbg !21
  %86 = and i1 %8, %75, !dbg !21
  %87 = and i1 %8, %77, !dbg !21
  %88 = and i1 %8, %79, !dbg !21
  %89 = and i1 %8, %81, !dbg !21
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %44, i1 %82, i32 0, i1 %82) #3, !dbg !22
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %47, i1 %83, i32 0, i1 %83) #3, !dbg !22
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %50, i1 %84, i32 0, i1 %84) #3, !dbg !22
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %53, i1 %85, i32 0, i1 %85) #3, !dbg !22
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %56, i1 %86, i32 0, i1 %86) #3, !dbg !22
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %59, i1 %87, i32 0, i1 %87) #3, !dbg !22
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %62, i1 %88, i32 0, i1 %88) #3, !dbg !22
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %65, i1 %89, i32 0, i1 %89) #3, !dbg !22
  %98 = insertelement <8 x i32> poison, i32 %90, i64 0, !dbg !22
  %99 = insertelement <8 x i32> %98, i32 %91, i64 1, !dbg !22
  %100 = insertelement <8 x i32> %99, i32 %92, i64 2, !dbg !22
  %101 = insertelement <8 x i32> %100, i32 %93, i64 3, !dbg !22
  %102 = insertelement <8 x i32> %101, i32 %94, i64 4, !dbg !22
  %103 = insertelement <8 x i32> %102, i32 %95, i64 5, !dbg !22
  %104 = insertelement <8 x i32> %103, i32 %96, i64 6, !dbg !22
  %105 = insertelement <8 x i32> %104, i32 %97, i64 7, !dbg !22
  %106 = bitcast <8 x i32> %105 to <8 x float>, !dbg !22
  %107 = select <8 x i1> %41, <8 x float> %106, <8 x float> zeroinitializer, !dbg !23
  %108 = and <8 x i1> %20, %39, !dbg !24
  %109 = select <8 x i1> %108, <8 x float> %107, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, !dbg !25
  %110 = fadd <8 x float> %22, %109, !dbg !25
  %111 = add i32 %21, 2048, !dbg !14
  %112 = icmp slt i32 %111, %4, !dbg !14
  br i1 %112, label %.lr.ph, label %._crit_edge.loopexit, !dbg !14

._crit_edge.loopexit:                             ; preds = %.lr.ph
  %shift = shufflevector <8 x float> %110, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !8
  %113 = fadd <8 x float> %110, %shift, !dbg !8
  %shift11 = shufflevector <8 x float> %110, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !8
  %114 = fadd <8 x float> %shift11, %113, !dbg !8
  %shift12 = shufflevector <8 x float> %110, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !8
  %115 = fadd <8 x float> %shift12, %114, !dbg !8
  %shift13 = shufflevector <8 x float> %110, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !8
  %116 = fadd <8 x float> %shift13, %115, !dbg !8
  %shift14 = shufflevector <8 x float> %110, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !8
  %117 = fadd <8 x float> %shift14, %116, !dbg !8
  %shift15 = shufflevector <8 x float> %110, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !8
  %118 = fadd <8 x float> %shift15, %117, !dbg !8
  %shift16 = shufflevector <8 x float> %110, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !8
  %119 = fadd <8 x float> %shift16, %118, !dbg !8
  %120 = extractelement <8 x float> %119, i64 0, !dbg !8
  br label %._crit_edge, !dbg !8

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %5
  %121 = phi float [ 0.000000e+00, %5 ], [ %120, %._crit_edge.loopexit ], !dbg !26
  %122 = lshr i32 %6, 5, !dbg !8
  %123 = and i32 %122, 7, !dbg !8
  %124 = and i32 %6, 31, !dbg !8
  %125 = bitcast float %121 to i32, !dbg !32
  %126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %125, i32 16, i32 31), !dbg !32
  %127 = bitcast i32 %126 to float, !dbg !32
  %128 = fadd float %121, %127, !dbg !26
  %129 = bitcast float %128 to i32, !dbg !32
  %130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %129, i32 8, i32 31), !dbg !32
  %131 = bitcast i32 %130 to float, !dbg !32
  %132 = fadd float %128, %131, !dbg !26
  %133 = bitcast float %132 to i32, !dbg !32
  %134 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %133, i32 4, i32 31), !dbg !32
  %135 = bitcast i32 %134 to float, !dbg !32
  %136 = fadd float %132, %135, !dbg !26
  %137 = bitcast float %136 to i32, !dbg !32
  %138 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %137, i32 2, i32 31), !dbg !32
  %139 = bitcast i32 %138 to float, !dbg !32
  %140 = fadd float %136, %139, !dbg !26
  %141 = bitcast float %140 to i32, !dbg !32
  %142 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %141, i32 1, i32 31), !dbg !32
  %143 = bitcast i32 %142 to float, !dbg !32
  %144 = fadd float %140, %143, !dbg !26
  %145 = icmp eq i32 %124, 0, !dbg !32
  %146 = zext nneg i32 %123 to i64, !dbg !32
  %147 = getelementptr float, ptr addrspace(3) @global_smem, i64 %146, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %147, float %144, i1 %145) #3, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %148 = icmp slt i32 %6, 8, !dbg !32
  %149 = sext i32 %6 to i64, !dbg !32
  %150 = getelementptr float, ptr addrspace(3) @global_smem, i64 %149, !dbg !32
  %151 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %150, i1 %148) #3, !dbg !32
  %152 = bitcast float %151 to i32, !dbg !32
  %153 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %152, i32 4, i32 31), !dbg !32
  %154 = bitcast i32 %153 to float, !dbg !32
  %155 = fadd float %151, %154, !dbg !26
  %156 = bitcast float %155 to i32, !dbg !32
  %157 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %156, i32 2, i32 31), !dbg !32
  %158 = bitcast i32 %157 to float, !dbg !32
  %159 = fadd float %155, %158, !dbg !26
  %160 = bitcast float %159 to i32, !dbg !32
  %161 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %160, i32 1, i32 31), !dbg !32
  %162 = bitcast i32 %161 to float, !dbg !32
  %163 = fadd float %159, %162, !dbg !26
  %164 = and i32 %6, 7, !dbg !32
  %165 = icmp eq i32 %164, 0, !dbg !32
  %166 = and i1 %148, %165, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %150, float %163, i1 %166) #3, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %167 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %168 = insertelement <1 x float> undef, float %167, i64 0, !dbg !34
  store <1 x float> %168, ptr addrspace(3) @global_smem, align 4, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %169 = load i32, ptr addrspace(3) @global_smem, align 4, !dbg !34
  %170 = sext i32 %7 to i64, !dbg !35
  %171 = getelementptr float, ptr addrspace(1) %1, i64 %170, !dbg !35
  %172 = icmp eq i32 %urem, 0, !dbg !36
  %173 = and i1 %172, %8, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %169, ptr addrspace(1) %171, i1 %173) #3, !dbg !36
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cfvpmojtn7tyxxslzfo2foeuin4kyuw2ytkwgr62kvyqq5nzrhjl.py", directory: "/tmp/torchinductor_leighm/fv")
!3 = !{ptr @triton__0d1d234, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d234, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d234", linkageName: "triton__0d1d234", scope: !2, file: !2, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 23, column: 33, scope: !5)
!9 = !DILocation(line: 20, column: 28, scope: !5)
!10 = !DILocation(line: 22, column: 21, scope: !5)
!11 = !DILocation(line: 30, column: 30, scope: !5)
!12 = !DILocation(line: 30, column: 38, scope: !5)
!13 = !DILocation(line: 30, column: 25, scope: !5)
!14 = !DILocation(line: 26, column: 36, scope: !5)
!15 = !DILocation(line: 27, column: 27, scope: !5)
!16 = !DILocation(line: 28, column: 25, scope: !5)
!17 = !DILocation(line: 30, column: 21, scope: !5)
!18 = !DILocation(line: 32, column: 22, scope: !5)
!19 = !DILocation(line: 33, column: 34, scope: !5)
!20 = !DILocation(line: 33, column: 71, scope: !5)
!21 = !DILocation(line: 33, column: 78, scope: !5)
!22 = !DILocation(line: 33, column: 63, scope: !5)
!23 = !DILocation(line: 35, column: 36, scope: !5)
!24 = !DILocation(line: 38, column: 33, scope: !5)
!25 = !DILocation(line: 38, column: 46, scope: !5)
!26 = !DILocation(line: 233, column: 15, scope: !27, inlinedAt: !30)
!27 = distinct !DILexicalBlockFile(scope: !29, file: !28, discriminator: 0)
!28 = !DIFile(filename: "standard.py", directory: "/opt/conda/lib/python3.10/site-packages/triton/language")
!29 = distinct !DILexicalBlockFile(scope: !5, file: !28, discriminator: 0)
!30 = !DILocation(line: 243, column: 36, scope: !27, inlinedAt: !31)
!31 = !DILocation(line: 39, column: 25, scope: !27)
!32 = !DILocation(line: 243, column: 36, scope: !29, inlinedAt: !33)
!33 = !DILocation(line: 39, column: 25, scope: !29)
!34 = !DILocation(line: 39, column: 28, scope: !5)
!35 = !DILocation(line: 40, column: 25, scope: !5)
!36 = !DILocation(line: 40, column: 36, scope: !5)
!37 = !DILocation(line: 40, column: 4, scope: !5)
