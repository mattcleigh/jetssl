module {
  tt.func public @triton__0d1d2d34(%arg0: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg3: i32, %arg4: i32) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32
    %cst = arith.constant dense<0.000000e+00> : tensor<1x2048xf16>
    %c2048_i32 = arith.constant 2048 : i32
    %c5798_i32 = arith.constant 5798 : i32
    %c0_i32 = arith.constant 0 : i32
    %cst_0 = arith.constant dense<1.000000e+00> : tensor<1x2048xf32>
    %cst_1 = arith.constant dense<-2.220000e-01> : tensor<1x2048xf32>
    %cst_2 = arith.constant dense<5798> : tensor<1x2048xi32>
    %cst_3 = arith.constant dense<0.000000e+00> : tensor<1x2048xf32>
    %0 = tt.get_program_id x : i32
    %1 = arith.cmpi slt, %0, %c2_i32 : i32
    %2 = tt.splat %1 : (i1) -> tensor<1x1xi1>
    %3 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32>
    %4 = tt.expand_dims %3 {axis = 0 : i32} : (tensor<2048xi32>) -> tensor<1x2048xi32>
    %5 = arith.muli %0, %c5798_i32 : i32
    %6 = tt.splat %5 : (i32) -> tensor<1x2048xi32>
    %7 = tt.splat %arg0 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %8 = tt.splat %1 : (i1) -> tensor<1x2048xi1>
    %9 = tt.splat %arg1 : (!tt.ptr<f16, 1>) -> tensor<1x2048x!tt.ptr<f16, 1>>
    %10 = scf.for %arg5 = %c0_i32 to %c5798_i32 step %c2048_i32 iter_args(%arg6 = %cst_3) -> (tensor<1x2048xf32>)  : i32 {
      %15 = tt.splat %arg5 : (i32) -> tensor<1x2048xi32>
      %16 = arith.addi %15, %4 : tensor<1x2048xi32>
      %17 = arith.cmpi slt, %16, %cst_2 : tensor<1x2048xi32>
      %18 = arith.addi %16, %6 : tensor<1x2048xi32>
      %19 = tt.addptr %7, %18 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %20 = arith.andi %17, %8 : tensor<1x2048xi1>
      %21 = tt.load %19, %20, %cst_3 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xf32>
      %22 = tt.addptr %9, %18 : tensor<1x2048x!tt.ptr<f16, 1>>, tensor<1x2048xi32>
      %23 = tt.load %22, %20, %cst {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xf16>
      %24 = arith.extf %23 : tensor<1x2048xf16> to tensor<1x2048xf32>
      %25 = arith.mulf %21, %cst_1 : tensor<1x2048xf32>
      %26 = arith.addf %25, %cst_0 : tensor<1x2048xf32>
      %27 = arith.subf %cst_0, %21 : tensor<1x2048xf32>
      %28 = arith.mulf %27, %24 : tensor<1x2048xf32>
      %29 = arith.subf %cst_3, %24 : tensor<1x2048xf32>
      %30 = arith.cmpf ogt, %29, %cst_3 : tensor<1x2048xf32>
      %31 = arith.cmpf une, %29, %29 : tensor<1x2048xf32>
      %32 = arith.ori %30, %31 : tensor<1x2048xi1>
      %33 = arith.select %32, %29, %cst_3 : tensor<1x2048xi1>, tensor<1x2048xf32>
      %34 = arith.addf %28, %33 : tensor<1x2048xf32>
      %35 = arith.subf %cst_3, %33 : tensor<1x2048xf32>
      %36 = math.exp %35 : tensor<1x2048xf32>
      %37 = arith.subf %29, %33 : tensor<1x2048xf32>
      %38 = math.exp %37 : tensor<1x2048xf32>
      %39 = arith.addf %36, %38 : tensor<1x2048xf32>
      %40 = math.log %39 : tensor<1x2048xf32>
      %41 = arith.addf %34, %40 : tensor<1x2048xf32>
      %42 = math.exp %29 : tensor<1x2048xf32>
      %43 = arith.addf %42, %cst_0 : tensor<1x2048xf32>
      %44 = arith.divf %cst_0, %43 : tensor<1x2048xf32>
      %45 = arith.mulf %44, %21 : tensor<1x2048xf32>
      %46 = arith.subf %cst_0, %44 : tensor<1x2048xf32>
      %47 = arith.mulf %46, %27 : tensor<1x2048xf32>
      %48 = arith.addf %45, %47 : tensor<1x2048xf32>
      %49 = arith.subf %cst_0, %48 : tensor<1x2048xf32>
      %50 = arith.mulf %49, %49 : tensor<1x2048xf32>
      %51 = arith.mulf %50, %49 : tensor<1x2048xf32>
      %52 = arith.mulf %41, %51 : tensor<1x2048xf32>
      %53 = arith.mulf %26, %52 : tensor<1x2048xf32>
      %54 = arith.addf %arg6, %53 : tensor<1x2048xf32>
      %55 = arith.select %20, %54, %arg6 : tensor<1x2048xi1>, tensor<1x2048xf32>
      scf.yield %55 : tensor<1x2048xf32>
    }
    %11 = "tt.reduce"(%10) <{axis = 1 : i32}> ({
    ^bb0(%arg5: f32, %arg6: f32):
      %15 = arith.addf %arg5, %arg6 : f32
      tt.reduce.return %15 : f32
    }) : (tensor<1x2048xf32>) -> tensor<1xf32>
    %12 = tt.expand_dims %11 {axis = 1 : i32} : (tensor<1xf32>) -> tensor<1x1xf32>
    %13 = tt.addptr %arg2, %0 : !tt.ptr<f32, 1>, i32
    %14 = tt.splat %13 : (!tt.ptr<f32, 1>) -> tensor<1x1x!tt.ptr<f32, 1>>
    tt.store %14, %12, %2 {cache = 1 : i32, evict = 1 : i32} : tensor<1x1xf32>
    tt.return
  }
}
