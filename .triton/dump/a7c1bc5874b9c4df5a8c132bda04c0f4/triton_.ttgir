#blocked = #triton_gpu.blocked<{sizePerThread = [1, 2], threadsPerWarp = [1, 32], warpsPerCTA = [1, 8], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 8], order = [0, 1], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
module attributes {"triton_gpu.compute-capability" = 80 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton__0d1d2d34(%arg0: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg3: i32, %arg4: i32) attributes {noinline = false} {
    %cst = arith.constant dense<5798> : tensor<1x2048xi32, #blocked>
    %c0_i32 = arith.constant 0 : i32
    %c5798_i32 = arith.constant 5798 : i32
    %c2048_i32 = arith.constant 2048 : i32
    %c2_i32 = arith.constant 2 : i32
    %cst_0 = arith.constant dense<1.000000e+00> : tensor<1x2048xf32, #blocked>
    %cst_1 = arith.constant dense<-2.220000e-01> : tensor<1x2048xf32, #blocked>
    %cst_2 = arith.constant dense<0.000000e+00> : tensor<1x2048xf32, #blocked>
    %cst_3 = arith.constant dense<0.000000e+00> : tensor<1x2048xf16, #blocked>
    %0 = tt.get_program_id x : i32
    %1 = arith.cmpi slt, %0, %c2_i32 : i32
    %2 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %3 = tt.expand_dims %2 {axis = 0 : i32} : (tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x2048xi32, #blocked>
    %4 = arith.muli %0, %c5798_i32 : i32
    %5 = tt.splat %4 : (i32) -> tensor<1x2048xi32, #blocked>
    %6 = tt.splat %arg0 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>, #blocked>
    %7 = tt.splat %1 : (i1) -> tensor<1x2048xi1, #blocked>
    %8 = tt.splat %arg1 : (!tt.ptr<f16, 1>) -> tensor<1x2048x!tt.ptr<f16, 1>, #blocked>
    %9 = scf.for %arg5 = %c0_i32 to %c5798_i32 step %c2048_i32 iter_args(%arg6 = %cst_2) -> (tensor<1x2048xf32, #blocked>)  : i32 {
      %16 = tt.splat %arg5 : (i32) -> tensor<1x2048xi32, #blocked>
      %17 = arith.addi %16, %3 : tensor<1x2048xi32, #blocked>
      %18 = arith.cmpi slt, %17, %cst : tensor<1x2048xi32, #blocked>
      %19 = arith.addi %17, %5 : tensor<1x2048xi32, #blocked>
      %20 = tt.addptr %6, %19 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %21 = arith.andi %18, %7 : tensor<1x2048xi1, #blocked>
      %22 = tt.load %20, %21, %cst_2 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xf32, #blocked>
      %23 = tt.addptr %8, %19 : tensor<1x2048x!tt.ptr<f16, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %24 = tt.load %23, %21, %cst_3 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xf16, #blocked>
      %25 = arith.extf %24 : tensor<1x2048xf16, #blocked> to tensor<1x2048xf32, #blocked>
      %26 = arith.mulf %22, %cst_1 : tensor<1x2048xf32, #blocked>
      %27 = arith.addf %26, %cst_0 : tensor<1x2048xf32, #blocked>
      %28 = arith.subf %cst_0, %22 : tensor<1x2048xf32, #blocked>
      %29 = arith.mulf %28, %25 : tensor<1x2048xf32, #blocked>
      %30 = arith.subf %cst_2, %25 : tensor<1x2048xf32, #blocked>
      %31 = arith.cmpf ogt, %30, %cst_2 : tensor<1x2048xf32, #blocked>
      %32 = arith.cmpf une, %30, %30 : tensor<1x2048xf32, #blocked>
      %33 = arith.ori %31, %32 : tensor<1x2048xi1, #blocked>
      %34 = arith.select %33, %30, %cst_2 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked>
      %35 = arith.addf %29, %34 : tensor<1x2048xf32, #blocked>
      %36 = arith.subf %cst_2, %34 : tensor<1x2048xf32, #blocked>
      %37 = math.exp %36 : tensor<1x2048xf32, #blocked>
      %38 = arith.subf %30, %34 : tensor<1x2048xf32, #blocked>
      %39 = math.exp %38 : tensor<1x2048xf32, #blocked>
      %40 = arith.addf %37, %39 : tensor<1x2048xf32, #blocked>
      %41 = math.log %40 : tensor<1x2048xf32, #blocked>
      %42 = arith.addf %35, %41 : tensor<1x2048xf32, #blocked>
      %43 = math.exp %30 : tensor<1x2048xf32, #blocked>
      %44 = arith.addf %43, %cst_0 : tensor<1x2048xf32, #blocked>
      %45 = arith.divf %cst_0, %44 : tensor<1x2048xf32, #blocked>
      %46 = arith.mulf %45, %22 : tensor<1x2048xf32, #blocked>
      %47 = arith.subf %cst_0, %45 : tensor<1x2048xf32, #blocked>
      %48 = arith.mulf %47, %28 : tensor<1x2048xf32, #blocked>
      %49 = arith.addf %46, %48 : tensor<1x2048xf32, #blocked>
      %50 = arith.subf %cst_0, %49 : tensor<1x2048xf32, #blocked>
      %51 = arith.mulf %50, %50 : tensor<1x2048xf32, #blocked>
      %52 = arith.mulf %51, %50 : tensor<1x2048xf32, #blocked>
      %53 = arith.mulf %42, %52 : tensor<1x2048xf32, #blocked>
      %54 = arith.mulf %27, %53 : tensor<1x2048xf32, #blocked>
      %55 = arith.addf %arg6, %54 : tensor<1x2048xf32, #blocked>
      %56 = arith.select %21, %55, %arg6 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked>
      scf.yield %56 : tensor<1x2048xf32, #blocked>
    }
    %10 = "tt.reduce"(%9) <{axis = 1 : i32}> ({
    ^bb0(%arg5: f32, %arg6: f32):
      %16 = arith.addf %arg5, %arg6 : f32
      tt.reduce.return %16 : f32
    }) : (tensor<1x2048xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %11 = triton_gpu.convert_layout %10 : (tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>
    %12 = tt.expand_dims %11 {axis = 1 : i32} : (tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<1x1xf32, #blocked1>
    %13 = tt.addptr %arg2, %0 : !tt.ptr<f32, 1>, i32
    %14 = tt.splat %13 : (!tt.ptr<f32, 1>) -> tensor<1x1x!tt.ptr<f32, 1>, #blocked1>
    %15 = tt.splat %1 : (i1) -> tensor<1x1xi1, #blocked1>
    tt.store %14, %12, %15 {cache = 1 : i32, evict = 1 : i32} : tensor<1x1xf32, #blocked1>
    tt.return
  }
}
