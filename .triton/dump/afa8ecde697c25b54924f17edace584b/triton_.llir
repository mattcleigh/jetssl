; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d456(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, i32 %6) local_unnamed_addr !dbg !5 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %urem = and i32 %8, 255, !dbg !8
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !9
  %10 = icmp slt i32 %9, 2, !dbg !10
  %11 = add i32 %4, 1, !dbg !11
  %12 = sdiv i32 %11, 2, !dbg !12
  %13 = mul i32 %9, %12, !dbg !13
  %14 = icmp sgt i32 %6, 0, !dbg !14
  br i1 %14, label %.lr.ph.preheader, label %._crit_edge, !dbg !14

.lr.ph.preheader:                                 ; preds = %7
  %15 = insertelement <8 x i32> poison, i32 %6, i64 0
  %16 = shufflevector <8 x i32> %15, <8 x i32> poison, <8 x i32> zeroinitializer
  %17 = insertelement <8 x i32> poison, i32 %13, i64 0
  %18 = shufflevector <8 x i32> %17, <8 x i32> poison, <8 x i32> zeroinitializer
  %19 = insertelement <8 x i32> poison, i32 %4, i64 0
  %20 = shufflevector <8 x i32> %19, <8 x i32> poison, <8 x i32> zeroinitializer
  %21 = insertelement <8 x i1> poison, i1 %10, i64 0
  %22 = shufflevector <8 x i1> %21, <8 x i1> poison, <8 x i32> zeroinitializer
  br label %.lr.ph, !dbg !14

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %23 = phi i32 [ %169, %.lr.ph ], [ 0, %.lr.ph.preheader ]
  %24 = phi <8 x float> [ %168, %.lr.ph ], [ zeroinitializer, %.lr.ph.preheader ]
  %25 = or i32 %23, %urem, !dbg !15
  %26 = or i32 %25, 256, !dbg !15
  %27 = or i32 %25, 512, !dbg !15
  %28 = or i32 %25, 768, !dbg !15
  %29 = or i32 %25, 1024, !dbg !15
  %30 = or i32 %25, 1280, !dbg !15
  %31 = or i32 %25, 1536, !dbg !15
  %32 = or i32 %25, 1792, !dbg !15
  %33 = insertelement <8 x i32> poison, i32 %25, i64 0, !dbg !16
  %34 = insertelement <8 x i32> %33, i32 %26, i64 1, !dbg !16
  %35 = insertelement <8 x i32> %34, i32 %27, i64 2, !dbg !16
  %36 = insertelement <8 x i32> %35, i32 %28, i64 3, !dbg !16
  %37 = insertelement <8 x i32> %36, i32 %29, i64 4, !dbg !16
  %38 = insertelement <8 x i32> %37, i32 %30, i64 5, !dbg !16
  %39 = insertelement <8 x i32> %38, i32 %31, i64 6, !dbg !16
  %40 = insertelement <8 x i32> %39, i32 %32, i64 7, !dbg !16
  %41 = icmp slt <8 x i32> %40, %16, !dbg !16
  %42 = add <8 x i32> %40, %18, !dbg !17
  %43 = icmp slt <8 x i32> %42, %20, !dbg !18
  %44 = extractelement <8 x i32> %42, i64 0, !dbg !19
  %45 = sext i32 %44 to i64, !dbg !19
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !19
  %47 = extractelement <8 x i32> %42, i64 1, !dbg !19
  %48 = sext i32 %47 to i64, !dbg !19
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !19
  %50 = extractelement <8 x i32> %42, i64 2, !dbg !19
  %51 = sext i32 %50 to i64, !dbg !19
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !19
  %53 = extractelement <8 x i32> %42, i64 3, !dbg !19
  %54 = sext i32 %53 to i64, !dbg !19
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !19
  %56 = extractelement <8 x i32> %42, i64 4, !dbg !19
  %57 = sext i32 %56 to i64, !dbg !19
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !19
  %59 = extractelement <8 x i32> %42, i64 5, !dbg !19
  %60 = sext i32 %59 to i64, !dbg !19
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !19
  %62 = extractelement <8 x i32> %42, i64 6, !dbg !19
  %63 = sext i32 %62 to i64, !dbg !19
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !19
  %65 = extractelement <8 x i32> %42, i64 7, !dbg !19
  %66 = sext i32 %65 to i64, !dbg !19
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !19
  %68 = and <8 x i1> %41, %43, !dbg !20
  %69 = extractelement <8 x i1> %68, i64 0, !dbg !20
  %70 = and <8 x i1> %41, %43, !dbg !20
  %71 = extractelement <8 x i1> %70, i64 1, !dbg !20
  %72 = and <8 x i1> %41, %43, !dbg !20
  %73 = extractelement <8 x i1> %72, i64 2, !dbg !20
  %74 = and <8 x i1> %41, %43, !dbg !20
  %75 = extractelement <8 x i1> %74, i64 3, !dbg !20
  %76 = and <8 x i1> %41, %43, !dbg !20
  %77 = extractelement <8 x i1> %76, i64 4, !dbg !20
  %78 = and <8 x i1> %41, %43, !dbg !20
  %79 = extractelement <8 x i1> %78, i64 5, !dbg !20
  %80 = and <8 x i1> %41, %43, !dbg !20
  %81 = extractelement <8 x i1> %80, i64 6, !dbg !20
  %82 = and <8 x i1> %41, %43, !dbg !20
  %83 = extractelement <8 x i1> %82, i64 7, !dbg !20
  %84 = and i1 %10, %69, !dbg !21
  %85 = and i1 %10, %71, !dbg !21
  %86 = and i1 %10, %73, !dbg !21
  %87 = and i1 %10, %75, !dbg !21
  %88 = and i1 %10, %77, !dbg !21
  %89 = and i1 %10, %79, !dbg !21
  %90 = and i1 %10, %81, !dbg !21
  %91 = and i1 %10, %83, !dbg !21
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %46, i1 %84, i32 0, i1 %84) #3, !dbg !22
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 %85, i32 0, i1 %85) #3, !dbg !22
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %52, i1 %86, i32 0, i1 %86) #3, !dbg !22
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 %87, i32 0, i1 %87) #3, !dbg !22
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %58, i1 %88, i32 0, i1 %88) #3, !dbg !22
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %61, i1 %89, i32 0, i1 %89) #3, !dbg !22
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %64, i1 %90, i32 0, i1 %90) #3, !dbg !22
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %67, i1 %91, i32 0, i1 %91) #3, !dbg !22
  %100 = insertelement <8 x i32> poison, i32 %92, i64 0, !dbg !22
  %101 = insertelement <8 x i32> %100, i32 %93, i64 1, !dbg !22
  %102 = insertelement <8 x i32> %101, i32 %94, i64 2, !dbg !22
  %103 = insertelement <8 x i32> %102, i32 %95, i64 3, !dbg !22
  %104 = insertelement <8 x i32> %103, i32 %96, i64 4, !dbg !22
  %105 = insertelement <8 x i32> %104, i32 %97, i64 5, !dbg !22
  %106 = insertelement <8 x i32> %105, i32 %98, i64 6, !dbg !22
  %107 = insertelement <8 x i32> %106, i32 %99, i64 7, !dbg !22
  %108 = bitcast <8 x i32> %107 to <8 x float>, !dbg !22
  %109 = fmul <8 x float> %108, <float 0x3FCC6A7F00000000, float 0x3FCC6A7F00000000, float 0x3FCC6A7F00000000, float 0x3FCC6A7F00000000, float 0x3FCC6A7F00000000, float 0x3FCC6A7F00000000, float 0x3FCC6A7F00000000, float 0x3FCC6A7F00000000>, !dbg !23
  %110 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %109, !dbg !24
  %111 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !25
  %112 = getelementptr float, ptr addrspace(1) %1, i64 %48, !dbg !25
  %113 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !25
  %114 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !25
  %115 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !25
  %116 = getelementptr float, ptr addrspace(1) %1, i64 %60, !dbg !25
  %117 = getelementptr float, ptr addrspace(1) %1, i64 %63, !dbg !25
  %118 = getelementptr float, ptr addrspace(1) %1, i64 %66, !dbg !25
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %111, i1 %84, i32 0, i1 %84) #3, !dbg !26
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %112, i1 %85, i32 0, i1 %85) #3, !dbg !26
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %113, i1 %86, i32 0, i1 %86) #3, !dbg !26
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %114, i1 %87, i32 0, i1 %87) #3, !dbg !26
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %115, i1 %88, i32 0, i1 %88) #3, !dbg !26
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %116, i1 %89, i32 0, i1 %89) #3, !dbg !26
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %117, i1 %90, i32 0, i1 %90) #3, !dbg !26
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %118, i1 %91, i32 0, i1 %91) #3, !dbg !26
  %127 = insertelement <8 x i32> poison, i32 %119, i64 0, !dbg !26
  %128 = insertelement <8 x i32> %127, i32 %120, i64 1, !dbg !26
  %129 = insertelement <8 x i32> %128, i32 %121, i64 2, !dbg !26
  %130 = insertelement <8 x i32> %129, i32 %122, i64 3, !dbg !26
  %131 = insertelement <8 x i32> %130, i32 %123, i64 4, !dbg !26
  %132 = insertelement <8 x i32> %131, i32 %124, i64 5, !dbg !26
  %133 = insertelement <8 x i32> %132, i32 %125, i64 6, !dbg !26
  %134 = insertelement <8 x i32> %133, i32 %126, i64 7, !dbg !26
  %135 = bitcast <8 x i32> %134 to <8 x float>, !dbg !26
  %136 = getelementptr float, ptr addrspace(1) %2, i64 %45, !dbg !27
  %137 = getelementptr float, ptr addrspace(1) %2, i64 %48, !dbg !27
  %138 = getelementptr float, ptr addrspace(1) %2, i64 %51, !dbg !27
  %139 = getelementptr float, ptr addrspace(1) %2, i64 %54, !dbg !27
  %140 = getelementptr float, ptr addrspace(1) %2, i64 %57, !dbg !27
  %141 = getelementptr float, ptr addrspace(1) %2, i64 %60, !dbg !27
  %142 = getelementptr float, ptr addrspace(1) %2, i64 %63, !dbg !27
  %143 = getelementptr float, ptr addrspace(1) %2, i64 %66, !dbg !27
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %136, i1 %84, i32 0, i1 %84) #3, !dbg !28
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %137, i1 %85, i32 0, i1 %85) #3, !dbg !28
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %138, i1 %86, i32 0, i1 %86) #3, !dbg !28
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %139, i1 %87, i32 0, i1 %87) #3, !dbg !28
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %140, i1 %88, i32 0, i1 %88) #3, !dbg !28
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %141, i1 %89, i32 0, i1 %89) #3, !dbg !28
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %142, i1 %90, i32 0, i1 %90) #3, !dbg !28
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %143, i1 %91, i32 0, i1 %91) #3, !dbg !28
  %152 = insertelement <8 x i32> poison, i32 %144, i64 0, !dbg !28
  %153 = insertelement <8 x i32> %152, i32 %145, i64 1, !dbg !28
  %154 = insertelement <8 x i32> %153, i32 %146, i64 2, !dbg !28
  %155 = insertelement <8 x i32> %154, i32 %147, i64 3, !dbg !28
  %156 = insertelement <8 x i32> %155, i32 %148, i64 4, !dbg !28
  %157 = insertelement <8 x i32> %156, i32 %149, i64 5, !dbg !28
  %158 = insertelement <8 x i32> %157, i32 %150, i64 6, !dbg !28
  %159 = insertelement <8 x i32> %158, i32 %151, i64 7, !dbg !28
  %160 = bitcast <8 x i32> %159 to <8 x float>, !dbg !28
  %161 = fmul <8 x float> %160, %160, !dbg !29
  %162 = fmul <8 x float> %161, %160, !dbg !30
  %163 = fmul <8 x float> %162, %135, !dbg !31
  %164 = fmul <8 x float> %110, %163, !dbg !32
  %165 = select <8 x i1> %43, <8 x float> %164, <8 x float> zeroinitializer, !dbg !33
  %166 = and <8 x i1> %22, %41, !dbg !34
  %167 = select <8 x i1> %166, <8 x float> %165, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, !dbg !35
  %168 = fadd <8 x float> %24, %167, !dbg !35
  %169 = add i32 %23, 2048, !dbg !14
  %170 = icmp slt i32 %169, %6, !dbg !14
  br i1 %170, label %.lr.ph, label %._crit_edge.loopexit, !dbg !14

._crit_edge.loopexit:                             ; preds = %.lr.ph
  %shift = shufflevector <8 x float> %168, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !8
  %171 = fadd <8 x float> %168, %shift, !dbg !8
  %shift11 = shufflevector <8 x float> %168, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !8
  %172 = fadd <8 x float> %shift11, %171, !dbg !8
  %shift12 = shufflevector <8 x float> %168, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !8
  %173 = fadd <8 x float> %shift12, %172, !dbg !8
  %shift13 = shufflevector <8 x float> %168, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !8
  %174 = fadd <8 x float> %shift13, %173, !dbg !8
  %shift14 = shufflevector <8 x float> %168, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !8
  %175 = fadd <8 x float> %shift14, %174, !dbg !8
  %shift15 = shufflevector <8 x float> %168, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !8
  %176 = fadd <8 x float> %shift15, %175, !dbg !8
  %shift16 = shufflevector <8 x float> %168, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !8
  %177 = fadd <8 x float> %shift16, %176, !dbg !8
  %178 = extractelement <8 x float> %177, i64 0, !dbg !8
  br label %._crit_edge, !dbg !8

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %7
  %179 = phi float [ 0.000000e+00, %7 ], [ %178, %._crit_edge.loopexit ], !dbg !36
  %180 = lshr i32 %8, 5, !dbg !8
  %181 = and i32 %180, 7, !dbg !8
  %182 = and i32 %8, 31, !dbg !8
  %183 = bitcast float %179 to i32, !dbg !42
  %184 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %183, i32 16, i32 31), !dbg !42
  %185 = bitcast i32 %184 to float, !dbg !42
  %186 = fadd float %179, %185, !dbg !36
  %187 = bitcast float %186 to i32, !dbg !42
  %188 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %187, i32 8, i32 31), !dbg !42
  %189 = bitcast i32 %188 to float, !dbg !42
  %190 = fadd float %186, %189, !dbg !36
  %191 = bitcast float %190 to i32, !dbg !42
  %192 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %191, i32 4, i32 31), !dbg !42
  %193 = bitcast i32 %192 to float, !dbg !42
  %194 = fadd float %190, %193, !dbg !36
  %195 = bitcast float %194 to i32, !dbg !42
  %196 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %195, i32 2, i32 31), !dbg !42
  %197 = bitcast i32 %196 to float, !dbg !42
  %198 = fadd float %194, %197, !dbg !36
  %199 = bitcast float %198 to i32, !dbg !42
  %200 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %199, i32 1, i32 31), !dbg !42
  %201 = bitcast i32 %200 to float, !dbg !42
  %202 = fadd float %198, %201, !dbg !36
  %203 = icmp eq i32 %182, 0, !dbg !42
  %204 = zext nneg i32 %181 to i64, !dbg !42
  %205 = getelementptr float, ptr addrspace(3) @global_smem, i64 %204, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %205, float %202, i1 %203) #3, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %206 = icmp slt i32 %8, 8, !dbg !42
  %207 = sext i32 %8 to i64, !dbg !42
  %208 = getelementptr float, ptr addrspace(3) @global_smem, i64 %207, !dbg !42
  %209 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %208, i1 %206) #3, !dbg !42
  %210 = bitcast float %209 to i32, !dbg !42
  %211 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %210, i32 4, i32 31), !dbg !42
  %212 = bitcast i32 %211 to float, !dbg !42
  %213 = fadd float %209, %212, !dbg !36
  %214 = bitcast float %213 to i32, !dbg !42
  %215 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %214, i32 2, i32 31), !dbg !42
  %216 = bitcast i32 %215 to float, !dbg !42
  %217 = fadd float %213, %216, !dbg !36
  %218 = bitcast float %217 to i32, !dbg !42
  %219 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %218, i32 1, i32 31), !dbg !42
  %220 = bitcast i32 %219 to float, !dbg !42
  %221 = fadd float %217, %220, !dbg !36
  %222 = and i32 %8, 7, !dbg !42
  %223 = icmp eq i32 %222, 0, !dbg !42
  %224 = and i1 %206, %223, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %208, float %221, i1 %224) #3, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %225 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %226 = insertelement <1 x float> undef, float %225, i64 0, !dbg !44
  store <1 x float> %226, ptr addrspace(3) @global_smem, align 4, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %227 = load i32, ptr addrspace(3) @global_smem, align 4, !dbg !44
  %228 = sext i32 %9 to i64, !dbg !45
  %229 = getelementptr float, ptr addrspace(1) %3, i64 %228, !dbg !45
  %230 = icmp eq i32 %urem, 0, !dbg !46
  %231 = and i1 %230, %10, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %227, ptr addrspace(1) %229, i1 %231) #3, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "c4x5gue3cjfwjlnw2owcnhud4vsjci2qjxofwb5insf5oy233b4p.py", directory: "/tmp/torchinductor_leighm/4x")
!3 = !{ptr @triton__0d1d2d3d456, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d456, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d456", linkageName: "triton__0d1d2d3d456", scope: !2, file: !2, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 23, column: 33, scope: !5)
!9 = !DILocation(line: 20, column: 28, scope: !5)
!10 = !DILocation(line: 22, column: 21, scope: !5)
!11 = !DILocation(line: 30, column: 30, scope: !5)
!12 = !DILocation(line: 30, column: 38, scope: !5)
!13 = !DILocation(line: 30, column: 25, scope: !5)
!14 = !DILocation(line: 26, column: 36, scope: !5)
!15 = !DILocation(line: 27, column: 27, scope: !5)
!16 = !DILocation(line: 28, column: 25, scope: !5)
!17 = !DILocation(line: 30, column: 21, scope: !5)
!18 = !DILocation(line: 32, column: 22, scope: !5)
!19 = !DILocation(line: 33, column: 34, scope: !5)
!20 = !DILocation(line: 33, column: 71, scope: !5)
!21 = !DILocation(line: 33, column: 78, scope: !5)
!22 = !DILocation(line: 33, column: 63, scope: !5)
!23 = !DILocation(line: 35, column: 22, scope: !5)
!24 = !DILocation(line: 37, column: 22, scope: !5)
!25 = !DILocation(line: 38, column: 34, scope: !5)
!26 = !DILocation(line: 38, column: 63, scope: !5)
!27 = !DILocation(line: 39, column: 34, scope: !5)
!28 = !DILocation(line: 39, column: 63, scope: !5)
!29 = !DILocation(line: 40, column: 23, scope: !5)
!30 = !DILocation(line: 41, column: 24, scope: !5)
!31 = !DILocation(line: 42, column: 23, scope: !5)
!32 = !DILocation(line: 43, column: 23, scope: !5)
!33 = !DILocation(line: 45, column: 38, scope: !5)
!34 = !DILocation(line: 48, column: 34, scope: !5)
!35 = !DILocation(line: 48, column: 48, scope: !5)
!36 = !DILocation(line: 233, column: 15, scope: !37, inlinedAt: !40)
!37 = distinct !DILexicalBlockFile(scope: !39, file: !38, discriminator: 0)
!38 = !DIFile(filename: "standard.py", directory: "/opt/conda/lib/python3.10/site-packages/triton/language")
!39 = distinct !DILexicalBlockFile(scope: !5, file: !38, discriminator: 0)
!40 = !DILocation(line: 243, column: 36, scope: !37, inlinedAt: !41)
!41 = !DILocation(line: 49, column: 27, scope: !37)
!42 = !DILocation(line: 243, column: 36, scope: !39, inlinedAt: !43)
!43 = !DILocation(line: 49, column: 27, scope: !39)
!44 = !DILocation(line: 49, column: 30, scope: !5)
!45 = !DILocation(line: 50, column: 25, scope: !5)
!46 = !DILocation(line: 50, column: 37, scope: !5)
!47 = !DILocation(line: 50, column: 4, scope: !5)
