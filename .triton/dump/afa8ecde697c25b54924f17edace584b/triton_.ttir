module {
  tt.func public @triton__0d1d2d3d456(%arg0: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg4: i32, %arg5: i32, %arg6: i32) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32
    %c2048_i32 = arith.constant 2048 : i32
    %c0_i32 = arith.constant 0 : i32
    %cst = arith.constant dense<1.000000e+00> : tensor<1x2048xf32>
    %cst_0 = arith.constant dense<-2.220000e-01> : tensor<1x2048xf32>
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<1x2048xf32>
    %c1_i32 = arith.constant 1 : i32
    %0 = tt.get_program_id x : i32
    %1 = arith.cmpi slt, %0, %c2_i32 : i32
    %2 = tt.splat %1 : (i1) -> tensor<1x1xi1>
    %3 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32>
    %4 = tt.expand_dims %3 {axis = 0 : i32} : (tensor<2048xi32>) -> tensor<1x2048xi32>
    %5 = tt.splat %arg6 : (i32) -> tensor<1x2048xi32>
    %6 = arith.addi %arg4, %c1_i32 : i32
    %7 = arith.divsi %6, %c2_i32 : i32
    %8 = arith.muli %0, %7 : i32
    %9 = tt.splat %8 : (i32) -> tensor<1x2048xi32>
    %10 = tt.splat %arg4 : (i32) -> tensor<1x2048xi32>
    %11 = tt.splat %arg0 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %12 = tt.splat %1 : (i1) -> tensor<1x2048xi1>
    %13 = tt.splat %arg1 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %14 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %15 = scf.for %arg7 = %c0_i32 to %arg6 step %c2048_i32 iter_args(%arg8 = %cst_1) -> (tensor<1x2048xf32>)  : i32 {
      %20 = tt.splat %arg7 : (i32) -> tensor<1x2048xi32>
      %21 = arith.addi %20, %4 : tensor<1x2048xi32>
      %22 = arith.cmpi slt, %21, %5 : tensor<1x2048xi32>
      %23 = arith.addi %21, %9 : tensor<1x2048xi32>
      %24 = arith.cmpi slt, %23, %10 : tensor<1x2048xi32>
      %25 = tt.addptr %11, %23 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %26 = arith.andi %22, %24 : tensor<1x2048xi1>
      %27 = arith.andi %26, %12 : tensor<1x2048xi1>
      %28 = tt.load %25, %27, %cst_1 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32>
      %29 = arith.mulf %28, %cst_0 : tensor<1x2048xf32>
      %30 = arith.addf %29, %cst : tensor<1x2048xf32>
      %31 = tt.addptr %13, %23 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %32 = tt.load %31, %27, %cst_1 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32>
      %33 = tt.addptr %14, %23 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %34 = tt.load %33, %27, %cst_1 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32>
      %35 = arith.mulf %34, %34 : tensor<1x2048xf32>
      %36 = arith.mulf %35, %34 : tensor<1x2048xf32>
      %37 = arith.mulf %32, %36 : tensor<1x2048xf32>
      %38 = arith.mulf %30, %37 : tensor<1x2048xf32>
      %39 = arith.select %24, %38, %cst_1 : tensor<1x2048xi1>, tensor<1x2048xf32>
      %40 = arith.addf %arg8, %39 : tensor<1x2048xf32>
      %41 = arith.andi %22, %12 : tensor<1x2048xi1>
      %42 = arith.select %41, %40, %arg8 : tensor<1x2048xi1>, tensor<1x2048xf32>
      scf.yield %42 : tensor<1x2048xf32>
    }
    %16 = "tt.reduce"(%15) <{axis = 1 : i32}> ({
    ^bb0(%arg7: f32, %arg8: f32):
      %20 = arith.addf %arg7, %arg8 : f32
      tt.reduce.return %20 : f32
    }) : (tensor<1x2048xf32>) -> tensor<1xf32>
    %17 = tt.expand_dims %16 {axis = 1 : i32} : (tensor<1xf32>) -> tensor<1x1xf32>
    %18 = tt.addptr %arg3, %0 : !tt.ptr<f32, 1>, i32
    %19 = tt.splat %18 : (!tt.ptr<f32, 1>) -> tensor<1x1x!tt.ptr<f32, 1>>
    tt.store %19, %17, %2 {cache = 1 : i32, evict = 1 : i32} : tensor<1x1xf32>
    tt.return
  }
}
